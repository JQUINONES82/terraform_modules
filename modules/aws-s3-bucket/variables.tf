/**
  * <!-- Module variables go here.
  *      Always include descriptions as they will populate
  *      autogenerated documentation. -->
*/

variable "bucket" {
  type        = string
  description = <<-EOT
    The name of the S3 bucket to create
  EOT
  default     = null
}

variable "bucket_prefix" {
  type        = string
  description = <<-EOT
    The prefix to use for the S3 bucket name
  EOT
  default     = null
}

variable "force_destroy" {
  type        = bool
  description = <<-EOT
    Force destroy the bucket if it exists
  EOT
  default     = false
}

variable "object_lock_enabled" {
  type        = bool
  description = <<-EOT
    Enable object lock for the bucket
  EOT
  default     = false
}

variable "tags" {
  type        = map(any)
  description = <<-EOT
    Tags to apply to the bucket
  EOT
  default     = null
}
variable "block_public_acls" {
  type        = bool
  description = <<-EOT
    Block public access to the bucket
  EOT
  default     = true
}

variable "block_public_policy" {
  type        = bool
  description = <<-EOT
    Block public policy access to the bucket
  EOT
  default     = true
}

variable "ignore_public_acls" {
  type        = bool
  description = <<-EOT
    Ignore public acls for the bucket
  EOT
  default     = true
}

variable "restrict_public_buckets" {
  type        = bool
  description = <<-EOT
    Restrict public access to the bucket
  EOT
  default     = true
}

variable "versioning_enabled" {
  type        = bool
  description = <<-EOT
    Enable versioning for the bucket
  EOT
  default     = true
}

variable "expected_bucket_owner" {
  type        = string
  description = <<-EOT
    The expected owner of the bucket
  EOT
  default     = null
}

variable "logging_enabled" {
  type        = bool
  description = <<-EOT
    Enable logging for the bucket
  EOT
  default     = true
}

variable "logging_target_bucket" {
  type        = string
  description = <<-EOT
    The target bucket for the logging configuration
  EOT
  default     = null
}
variable "logging_target_prefix" {
  type        = string
  description = <<-EOT
    The target prefix for the logging configuration
  EOT
  default     = null
}

variable "enable_server_side_encryption" {
  type        = bool
  description = <<-EOT
    Enable server side encryption for the bucket
  EOT
  default     = true
}

variable "kms_master_key_id" {
  type        = string
  description = <<-EOT
    The KMS key id to use for encryption
  EOT
  default     = null
}

variable "enable_replication" {
  type        = bool
  description = <<-EOT
    Enable replication for the bucket
  EOT
  default     = true
}

variable "replication_role" {
  type        = string
  description = <<-EOT
    The role ARN to use for replication
  EOT
  default     = null
}

variable "replication_target_bucket" {
  type        = string
  description = <<-EOT
    The target bucket to use for replication
  EOT
  default     = null
}

variable "replication_token" {
  type        = string
  description = <<-EOT
    The token to use for replication
  EOT
  default     = null
}

variable "lifecycle_rules" {
  type = list(object({
    id     = string
    status = string
    filter = optional(object({
      prefix                   = optional(string)
      object_size_greater_than = optional(number)
      object_size_less_than    = optional(number)
      tags                     = optional(map(string))
    }))
    expiration = optional(object({
      days                         = optional(number)
      date                         = optional(string)
      expired_object_delete_marker = optional(bool)
    }))
    noncurrent_version_expiration = optional(object({
      noncurrent_days           = optional(number)
      newer_noncurrent_versions = optional(number)
    }))
    transitions = optional(list(object({
      days          = optional(number)
      date          = optional(string)
      storage_class = string
    })))
    noncurrent_version_transitions = optional(list(object({
      noncurrent_days           = number
      newer_noncurrent_versions = optional(number)
      storage_class             = string
    })))
    abort_incomplete_multipart_upload = optional(object({
      days_after_initiation = number
    }))
  }))
  description = <<-EOT
    List of lifecycle rules for the bucket
  EOT
  default     = []
}

variable "cors_rules" {
  type = list(object({
    id              = optional(string)
    allowed_headers = optional(list(string))
    allowed_methods = list(string)
    allowed_origins = list(string)
    expose_headers  = optional(list(string))
    max_age_seconds = optional(number)
  }))
  description = <<-EOT
    List of CORS rules for the bucket
  EOT
  default     = []
}

variable "website_configuration" {
  type = object({
    index_document = optional(object({
      suffix = string
    }))
    error_document = optional(object({
      key = string
    }))
    redirect_all_requests_to = optional(object({
      host_name = string
      protocol  = optional(string)
    }))
    routing_rules = optional(list(object({
      condition = optional(object({
        http_error_code_returned_equals = optional(string)
        key_prefix_equals               = optional(string)
      }))
      redirect = object({
        host_name               = optional(string)
        http_redirect_code      = optional(string)
        protocol                = optional(string)
        replace_key_prefix_with = optional(string)
        replace_key_with        = optional(string)
      })
    })))
  })
  description = <<-EOT
    Website configuration for the bucket
  EOT
  default     = null
}

variable "notification_configuration" {
  type = object({
    sns_topics = optional(list(object({
      topic_arn     = string
      events        = list(string)
      filter_prefix = optional(string)
      filter_suffix = optional(string)
    })))
    sqs_queues = optional(list(object({
      queue_arn     = string
      events        = list(string)
      filter_prefix = optional(string)
      filter_suffix = optional(string)
    })))
    lambda_functions = optional(list(object({
      lambda_function_arn = string
      events              = list(string)
      filter_prefix       = optional(string)
      filter_suffix       = optional(string)
    })))
  })
  description = <<-EOT
    Notification configuration for the bucket
  EOT
  default     = null
}

variable "enable_transfer_acceleration" {
  type        = bool
  description = <<-EOT
    Enable transfer acceleration for the bucket
  EOT
  default     = false
}

variable "request_payer" {
  type        = string
  description = <<-EOT
    Specifies who should bear the cost of Amazon S3 data transfer. Valid values: BucketOwner, Requester
  EOT
  default     = null
  validation {
    condition     = var.request_payer == null || contains(["BucketOwner", "Requester"], var.request_payer)
    error_message = "request_payer must be either 'BucketOwner' or 'Requester'."
  }
}

variable "object_ownership" {
  type        = string
  description = <<-EOT
    Object ownership setting for the bucket. Valid values: BucketOwnerPreferred, ObjectWriter, BucketOwnerEnforced
  EOT
  default     = null
  validation {
    condition     = var.object_ownership == null || contains(["BucketOwnerPreferred", "ObjectWriter", "BucketOwnerEnforced"], var.object_ownership)
    error_message = "object_ownership must be one of 'BucketOwnerPreferred', 'ObjectWriter', or 'BucketOwnerEnforced'."
  }
}

variable "bucket_policy" {
  type        = string
  description = <<-EOT
    IAM policy document for the bucket
  EOT
  default     = null
}

variable "intelligent_tiering_configurations" {
  type = map(object({
    name   = string
    status = string
    filter = optional(object({
      prefix = optional(string)
      tags   = optional(map(string))
    }))
    tiering = list(object({
      access_tier = string
      days        = number
    }))
  }))
  description = <<-EOT
    Map of intelligent tiering configurations
  EOT
  default     = {}
}

variable "timeouts" {
  type = object({
    create = optional(string, "20m")
    read   = optional(string, "20m")
    update = optional(string, "20m")
    delete = optional(string, "60m")
  })
  description = <<-EOT
    Configuration options for timeouts.
    
    create: Timeout for creating the S3 bucket (default: 20m)
    read: Timeout for reading the S3 bucket (default: 20m)
    update: Timeout for updating the S3 bucket (default: 20m)
    delete: Timeout for deleting the S3 bucket (default: 60m)
  EOT
  default     = null
}
