/**
  * <!-- Module variables go here.
  *      Always include descriptions as they will populate
  *      autogenerated documentation. -->
*/

variable "name" {
  type        = string
  description = <<-EOT
    Name of the security group. If omitted, Terraform will assign a random, unique name.
    Cannot be used with name_prefix.
  EOT
  default = null
}

variable "name_prefix" {
  type        = string
  description = <<-EOT
    Creates a unique name beginning with the specified prefix. Conflicts with name.
  EOT
  default = null
}

variable "description" {
  type        = string
  description = <<-EOT
    Security group description. Cannot be empty string.
  EOT
  default = "Managed by Terraform"

  validation {
    condition     = var.description != ""
    error_message = "Description cannot be an empty string."
  }
}

variable "vpc_id" {
  type        = string
  description = <<-EOT
    VPC ID where the security group will be created. If not specified, uses the default VPC.
  EOT
  default = null
}

variable "revoke_rules_on_delete" {
  type        = bool
  description = <<-EOT
    Instruct Terraform to revoke all of the Security Group's attached ingress and egress rules before deleting the rule itself.
    This is normally not needed, but certain AWS services may automatically add required rules that contain cyclic dependencies.
  EOT
  default = false
}

variable "tags" {
  type        = map(string)
  description = <<-EOT
    Map of tags to assign to the security group.
  EOT
  default = {}
}

variable "ingress_rules" {
  type = list(object({
    description                  = optional(string)
    ip_protocol                  = string
    from_port                    = optional(number)
    to_port                      = optional(number)
    cidr_ipv4                    = optional(string)
    cidr_ipv6                    = optional(string)
    prefix_list_id               = optional(string)
    referenced_security_group_id = optional(string)
    tags                         = optional(map(string), {})
  }))
  description = <<-EOT
    List of ingress rules to create. Each rule must specify exactly one source (cidr_ipv4, cidr_ipv6, prefix_list_id, or referenced_security_group_id).
    
    description: Description of the rule
    ip_protocol: IP protocol. Use -1 for all protocols
    from_port: Start port (or ICMP type number). Required unless ip_protocol is -1
    to_port: End port (or ICMP code). Required unless ip_protocol is -1
    cidr_ipv4: IPv4 CIDR block
    cidr_ipv6: IPv6 CIDR block  
    prefix_list_id: Prefix list ID
    referenced_security_group_id: Security group ID to reference
    tags: Additional tags for this rule
  EOT
  default = []

  validation {
    condition = alltrue([
      for rule in var.ingress_rules :
      (rule.ip_protocol == "-1" && rule.from_port == null && rule.to_port == null) ||
      (rule.ip_protocol != "-1" && rule.from_port != null && rule.to_port != null)
    ])
    error_message = "When ip_protocol is -1, from_port and to_port must be null. For other protocols, from_port and to_port are required."
  }

  validation {
    condition = alltrue([
      for rule in var.ingress_rules :
      length([
        for source in [rule.cidr_ipv4, rule.cidr_ipv6, rule.prefix_list_id, rule.referenced_security_group_id] :
        source if source != null
      ]) == 1
    ])
    error_message = "Each ingress rule must specify exactly one source: cidr_ipv4, cidr_ipv6, prefix_list_id, or referenced_security_group_id."
  }
}

variable "egress_rules" {
  type = list(object({
    description                  = optional(string)
    ip_protocol                  = string
    from_port                    = optional(number)
    to_port                      = optional(number)
    cidr_ipv4                    = optional(string)
    cidr_ipv6                    = optional(string)
    prefix_list_id               = optional(string)
    referenced_security_group_id = optional(string)
    tags                         = optional(map(string), {})
  }))
  description = <<-EOT
    List of egress rules to create. Each rule must specify exactly one destination (cidr_ipv4, cidr_ipv6, prefix_list_id, or referenced_security_group_id).
    
    description: Description of the rule
    ip_protocol: IP protocol. Use -1 for all protocols
    from_port: Start port (or ICMP type number). Required unless ip_protocol is -1
    to_port: End port (or ICMP code). Required unless ip_protocol is -1
    cidr_ipv4: IPv4 CIDR block
    cidr_ipv6: IPv6 CIDR block
    prefix_list_id: Prefix list ID
    referenced_security_group_id: Security group ID to reference
    tags: Additional tags for this rule
  EOT
  default = []

  validation {
    condition = alltrue([
      for rule in var.egress_rules :
      (rule.ip_protocol == "-1" && rule.from_port == null && rule.to_port == null) ||
      (rule.ip_protocol != "-1" && rule.from_port != null && rule.to_port != null)
    ])
    error_message = "When ip_protocol is -1, from_port and to_port must be null. For other protocols, from_port and to_port are required."
  }

  validation {
    condition = alltrue([
      for rule in var.egress_rules :
      length([
        for destination in [rule.cidr_ipv4, rule.cidr_ipv6, rule.prefix_list_id, rule.referenced_security_group_id] :
        destination if destination != null
      ]) == 1
    ])
    error_message = "Each egress rule must specify exactly one destination: cidr_ipv4, cidr_ipv6, prefix_list_id, or referenced_security_group_id."
  }
}

variable "timeouts" {
  type = object({
    create = optional(string, "10m")
    delete = optional(string, "15m")
  })
  description = <<-EOT
    Configuration options for timeouts.
    
    create: Timeout for creating the security group (default: 10m)
    delete: Timeout for deleting the security group (default: 15m)
  EOT
  default = null
}
