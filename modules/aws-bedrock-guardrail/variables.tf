/**
  * <!-- Module variables go here.
  *      Always include descriptions as they will populate
  *      autogenerated documentation. -->
*/

variable "name" {
  type        = string
  description = <<-EOT
    Name of the guardrail. Must be unique within the AWS account.
  EOT
}

variable "blocked_input_messaging" {
  type        = string
  description = <<-EOT
    Message to return when the guardrail blocks a prompt.
  EOT
}

variable "blocked_outputs_messaging" {
  type        = string
  description = <<-EOT
    Message to return when the guardrail blocks a model response.
  EOT
}

variable "description" {
  type        = string
  description = <<-EOT
    Description of the guardrail or its version.
  EOT
  default     = null
}

variable "kms_key_arn" {
  type        = string
  description = <<-EOT
    The KMS key with which the guardrail was encrypted at rest.
  EOT
  default     = null
}

variable "tags" {
  type        = map(string)
  description = <<-EOT
    Key-value map of resource tags. If configured with a provider default_tags 
    configuration block present, tags with matching keys will overwrite those 
    defined at the provider-level.
  EOT
  default     = {}
}

variable "content_policy_config" {
  type = object({
    filters_config = optional(list(object({
      input_strength  = optional(string)
      output_strength = optional(string)
      type           = optional(string)
    })))
    tier_config = optional(object({
      tier_name = string
    }))
  })
  description = <<-EOT
    Content policy config for a guardrail. Contains filters_config for content 
    filtering settings and tier_config for content policy tier configuration.
    
    filters_config:
    - input_strength: Strength for input filters (LOW, MEDIUM, HIGH)
    - output_strength: Strength for output filters (LOW, MEDIUM, HIGH)
    - type: Type of filter (SEXUAL, VIOLENCE, HATE, INSULTS, MISCONDUCT, PROMPT_ATTACK)
    
    tier_config:
    - tier_name: The name of the content policy tier (STANDARD or CLASSIC)
  EOT
  default     = null
}

variable "contextual_grounding_policy_config" {
  type = object({
    filters_config = list(object({
      threshold = number
      type      = string
    }))
    cross_region_config = optional(object({
      guardrail_profile_identifier = string
    }))
  })
  description = <<-EOT
    Contextual grounding policy config for a guardrail. Contains filters_config 
    for contextual grounding filters and optional cross_region_config.
    
    filters_config:
    - threshold: The threshold for this filter (0.0 to 1.0)
    - type: Type of contextual grounding filter (GROUNDING, RELEVANCE)
    
    cross_region_config:
    - guardrail_profile_identifier: Guardrail profile ARN for cross-region routing
  EOT
  default     = null
}

variable "sensitive_information_policy_config" {
  type = object({
    pii_entities_config = optional(list(object({
      action = string
      type   = string
    })))
    regexes_config = optional(list(object({
      action      = string
      description = optional(string)
      name        = string
      pattern     = string
    })))
  })
  description = <<-EOT
    Sensitive information policy config for a guardrail. Contains pii_entities_config 
    for PII entity filtering and regexes_config for custom regex patterns.
    
    pii_entities_config:
    - action: Action to take when PII is detected (BLOCK, ANONYMIZE)
    - type: Type of PII entity (NAME, EMAIL, PHONE, SSN, etc.)
    
    regexes_config:
    - action: Action to take when regex matches (BLOCK, ANONYMIZE)
    - description: Description of the regex pattern
    - name: Name of the regex configuration
    - pattern: The regex pattern to match
  EOT
  default     = null
}

variable "topic_policy_config" {
  type = object({
    topics_config = list(object({
      name       = string
      examples   = optional(list(string))
      type       = string
      definition = string
    }))
    tier_config = optional(object({
      tier_name = string
    }))
  })
  description = <<-EOT
    Topic policy config for a guardrail. Contains topics_config for topic 
    restrictions and optional tier_config.
    
    topics_config:
    - name: Name of topic in topic policy
    - examples: List of text examples for the topic
    - type: Type of topic in a policy (DENY)
    - definition: Definition of topic in topic policy
    
    tier_config:
    - tier_name: The name of the topic policy tier (STANDARD or CLASSIC)
  EOT
  default     = null
}

variable "word_policy_config" {
  type = object({
    managed_word_lists_config = optional(list(object({
      type = string
    })))
    words_config = optional(list(object({
      text = string
    })))
  })
  description = <<-EOT
    Word policy config for a guardrail. Contains managed_word_lists_config for 
    predefined word lists and words_config for custom words.
    
    managed_word_lists_config:
    - type: Type of managed word list (PROFANITY)
    
    words_config:
    - text: The word to filter
  EOT
  default     = null
}
