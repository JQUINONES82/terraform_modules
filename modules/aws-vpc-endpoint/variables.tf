/**
  * <!-- Module variables go here.
  *      Always include descriptions as they will populate
  *      autogenerated documentation. -->
*/

variable "vpc_id" {
  type        = string
  description = <<-EOT
    The ID of the VPC in which the endpoint will be used.
  EOT
}

variable "auto_accept" {
  type        = bool
  description = <<-EOT
    Accept the VPC endpoint (the VPC endpoint and service need to be in the same AWS account).
  EOT
  default = null
}

variable "policy" {
  type        = string
  description = <<-EOT
    A policy to attach to the endpoint that controls access to the service. 
    This is a JSON formatted string. Defaults to full access. All Gateway and some Interface endpoints support policies.
  EOT
  default = null
}

variable "private_dns_enabled" {
  type        = bool
  description = <<-EOT
    Whether or not to associate a private hosted zone with the specified VPC. 
    Applicable for endpoints of type Interface. Most users will want this enabled to allow services within the VPC to automatically use the endpoint.
  EOT
  default = null
}

variable "ip_address_type" {
  type        = string
  description = <<-EOT
    The IP address type for the endpoint. Valid values are ipv4, dualstack, and ipv6.
  EOT
  default = null
  validation {
    condition = var.ip_address_type == null || can(regex("^(ipv4|dualstack|ipv6)$", var.ip_address_type))
    error_message = "ip_address_type must be one of: ipv4, dualstack, ipv6."
  }
}

variable "route_table_ids" {
  type        = list(string)
  description = <<-EOT
    One or more route table IDs. Applicable for endpoints of type Gateway.
  EOT
  default = null
}

variable "subnet_ids" {
  type        = list(string)
  description = <<-EOT
    The ID of one or more subnets in which to create a network interface for the endpoint. 
    Applicable for endpoints of type GatewayLoadBalancer and Interface. Interface type endpoints cannot function without being assigned to a subnet.
  EOT
  default = null
}

variable "security_group_ids" {
  type        = list(string)
  description = <<-EOT
    The ID of one or more security groups to associate with the network interface. 
    Applicable for endpoints of type Interface. If no security groups are specified, the VPC's default security group is associated with the endpoint.
  EOT
  default = null
}

variable "vpc_endpoint_type" {
  type        = string
  description = <<-EOT
    The VPC endpoint type. Valid values are Gateway, GatewayLoadBalancer, Interface, Resource, or ServiceNetwork.
  EOT
  default = "Gateway"
  validation {
    condition = can(regex("^(Gateway|GatewayLoadBalancer|Interface|Resource|ServiceNetwork)$", var.vpc_endpoint_type))
    error_message = "vpc_endpoint_type must be one of: Gateway, GatewayLoadBalancer, Interface, Resource, ServiceNetwork."
  }
}

variable "tags" {
  type        = map(string)
  description = <<-EOT
    A map of tags to assign to the resource.
  EOT
  default = {}
}

variable "service_name" {
  type        = string
  description = <<-EOT
    The service name. For AWS services the service name is usually in the form com.amazonaws.<region>.<service> 
    (the SageMaker AI Notebook service is an exception to this rule, the service name is in the form aws.sagemaker.<region>.notebook). 
    Exactly one of resource_configuration_arn, service_name or service_network_arn is required.
  EOT
  default = null
}

variable "resource_configuration_arn" {
  type        = string
  description = <<-EOT
    The ARN of a Resource Configuration to connect this VPC Endpoint to. 
    Exactly one of resource_configuration_arn, service_name or service_network_arn is required.
  EOT
  default = null
}

variable "service_network_arn" {
  type        = string
  description = <<-EOT
    The ARN of a Service Network to connect this VPC Endpoint to. 
    Exactly one of resource_configuration_arn, service_name or service_network_arn is required.
  EOT
  default = null
}

variable "service_region" {
  type        = string
  description = <<-EOT
    The AWS region of the VPC Endpoint Service. If specified, the VPC endpoint will connect to the service in the provided region. 
    Applicable for endpoints of type Interface.
  EOT
  default = null
}

variable "dns_options" {
  type = object({
    dns_record_ip_type                             = optional(string)
    private_dns_only_for_inbound_resolver_endpoint = optional(bool)
  })
  description = <<-EOT
    The DNS options for the endpoint.
    
    dns_record_ip_type: The DNS records created for the endpoint. Valid values are ipv4, dualstack, service-defined, and ipv6.
    private_dns_only_for_inbound_resolver_endpoint: Indicates whether to enable private DNS only for inbound endpoints. 
    This option is available only for services that support both gateway and interface endpoints. 
    It routes traffic that originates from the VPC to the gateway endpoint and traffic that originates from on-premises to the interface endpoint. 
    Can only be specified if private_dns_enabled is true.
  EOT
  default = null

  validation {
    condition = var.dns_options == null || (
      try(var.dns_options.dns_record_ip_type, null) == null || 
      can(regex("^(ipv4|dualstack|service-defined|ipv6)$", var.dns_options.dns_record_ip_type))
    )
    error_message = "dns_record_ip_type must be one of: ipv4, dualstack, service-defined, ipv6."
  }
}

variable "subnet_configurations" {
  type = list(object({
    ipv4      = optional(string)
    ipv6      = optional(string)
    subnet_id = string
  }))
  description = <<-EOT
    Subnet configuration for the endpoint, used to select specific IPv4 and/or IPv6 addresses to the endpoint.
    
    ipv4: The IPv4 address to assign to the endpoint network interface in the subnet. You must provide an IPv4 address if the VPC endpoint supports IPv4.
    ipv6: The IPv6 address to assign to the endpoint network interface in the subnet. You must provide an IPv6 address if the VPC endpoint supports IPv6.
    subnet_id: The ID of the subnet. Must have a corresponding subnet in the subnet_ids argument.
  EOT
  default = []
}

variable "timeouts" {
  type = object({
    create = optional(string, "10m")
    update = optional(string, "10m")
    delete = optional(string, "10m")
  })
  description = <<-EOT
    Configuration options for timeouts.
    
    create: Timeout for creating the VPC endpoint (default: 10m)
    update: Timeout for updating the VPC endpoint (default: 10m)
    delete: Timeout for deleting the VPC endpoint (default: 10m)
  EOT
  default = null
}
